// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                     @id @default(autoincrement())
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  email                 String                  @unique
  hash                  String
  firstName             String?
  lastName              String?
  bookmarks             Bookmark[]
  imapConfiguration     ImapConfiguration[]
  databaseConfiguration DatabaseConfiguration[]
  flows                 Flow[]

  @@map("users")
}

model Bookmark {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  link        String
  userId      Int
  user        User     @relation(fields: [userId], references: [id])

  @@map("bookmarks")
}

model ImapConfiguration {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  email     String
  host      String
  port      Int
  tls       Boolean
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  imapSteps ImapStep[]
}

model DatabaseConfiguration {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  system       String
  server       String
  username     String
  password     String
  database     String
  port         Int
  userId       Int
  user         User           @relation(fields: [userId], references: [id])
  DataBaseStep DataBaseStep[]
}

model Flow {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  flowRuns  FlowRun[]
  imapStep  ImapStep?
  Step      Step[]
}

model Email {
  id               Int    @id @default(autoincrement())
  subject          String
  body             String
  bodyPreview      String
  mesageId         String
  internetMesageId String
  conversationId   String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model ImapStep {
  id                  Int               @id @default(autoincrement())
  imapConfigurationId Int
  imapConfiguration   ImapConfiguration @relation(fields: [imapConfigurationId], references: [id])
  flowId              Int               @unique
  flow                Flow              @relation(fields: [flowId], references: [id])
  imapStepRuns        ImapStepRun[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model ParameterType {
  id         Int         @id @default(autoincrement())
  name       String
  parameters Parameter[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model Parameter {
  id              Int           @id @default(autoincrement())
  index           Int
  name            String
  parameterTypeId Int
  parameterType   ParameterType @relation(fields: [parameterTypeId], references: [id])
  expressionId    Int
  expression      Expression    @relation(fields: [expressionId], references: [id])
  values          Value[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model Expression {
  id         Int         @id @default(autoincrement())
  name       String
  parameters Parameter[]
  steps      Step[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model Step {
  id           Int        @id @default(autoincrement())
  input        String
  output       String
  name         String
  expressionId Int        @unique
  expression   Expression @relation(fields: [expressionId], references: [id])
  flowId       Int        @unique
  flow         Flow       @relation(fields: [flowId], references: [id])
  succesorId   Int?       @unique
  succesor     Step?      @relation("StepsOrder", fields: [succesorId], references: [id])
  predecessor  Step?      @relation("StepsOrder")
  stepRuns     StepRun[]
  values       Value[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model FlowRun {
  id              Int              @id @default(autoincrement())
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  flowId          Int
  flow            Flow             @relation(fields: [flowId], references: [id])
  stepRuns        StepRun[]
  imapStepRun     ImapStepRun?
  DataBaseStepRun DataBaseStepRun?
}

model StepRun {
  id          Int        @id @default(autoincrement())
  log         String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  stepId      Int        @unique
  step        Step       @relation(fields: [stepId], references: [id])
  flowRunId   Int
  flowRun     FlowRun    @relation(fields: [flowRunId], references: [id])
  successorId Int?       @unique
  successor   StepRun?   @relation("StepsRunOrder", fields: [successorId], references: [id])
  predecessor StepRun?   @relation("StepsRunOrder")
  valueRuns   ValueRun[]
}

model Value {
  id          Int        @id @default(autoincrement())
  data        String
  ParameterId Int
  parameter   Parameter  @relation(fields: [ParameterId], references: [id])
  stepId      Int
  step        Step       @relation(fields: [stepId], references: [id])
  valueRuns   ValueRun[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model ValueRun {
  id        Int      @id @default(autoincrement())
  data      String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  valueId   Int
  value     Value    @relation(fields: [valueId], references: [id])
  stepRunId Int
  stepRun   StepRun  @relation(fields: [stepRunId], references: [id])
}

model ImapStepRun {
  id         Int      @id @default(autoincrement())
  imapStepId Int
  imapStep   ImapStep @relation(fields: [imapStepId], references: [id])
  flowRunId  Int      @unique
  flowRun    FlowRun  @relation(fields: [flowRunId], references: [id])
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model DataBaseData {
  id             Int          @id @default(autoincrement())
  data           String
  attributeName  String
  attributeType  String
  dataBaseStepId Int
  dataBaseStep   DataBaseStep @relation(fields: [dataBaseStepId], references: [id])
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model DataBaseStep {
  id                      Int                   @id @default(autoincrement())
  tableName               String
  databaseConfigurationId Int
  databaseConfiguration   DatabaseConfiguration @relation(fields: [databaseConfigurationId], references: [id])
  dataBaseData            DataBaseData[]
  dataBaseStepRuns         DataBaseStepRun[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model DataBaseStepRun {
  id             Int          @id @default(autoincrement())
  log            String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  dataBaseStepId Int
  dataBaseStep   DataBaseStep @relation(fields: [dataBaseStepId], references: [id])
  flowRunId      Int          @unique
  flowRun        FlowRun      @relation(fields: [flowRunId], references: [id])
}
